syntax on
colorscheme solarized
set background=dark
set encoding=utf8
scriptencoding utf8
set tags=tags
set autoindent
set expandtab
set tabstop=8
" default shiftwidth-- langauge specific below
set shiftwidth=4
set cindent
set formatoptions +=cro
set hlsearch
set nopaste
set foldmethod=indent
set foldcolumn=0
set foldlevel=99
set foldclose=all
set relativenumber
set number
" help file-searching
set tags=./tags;
set ruler
set vb
set autoread
set showcmd
set wrap
" for LanguageClient-neovim
set hidden
set timeoutlen=500
set laststatus=2
set wildmode=longest:full,full
if has('wildmenu')
    set wildmenu
endif
if has('wildignore')
    set wildoptions=pum
endif
" default spell on
" (dumb but non autocmd doesn't work for some reason)
augroup spell_default_on
    autocmd!
    autocmd VimEnter * setlocal spell spelllang=en
    autocmd BufNew * setlocal spell spelllang=en
    " sourcing one of the syntax files screws up the hi colors
    autocmd SourcePost * call MySetSpellColors()
augroup END
set shortmess-=S
inoremap kj <ESC>
inoremap jk <C-w>
inoremap lk <ESC>ll
inoremap <TAB> <C-n>
inoremap <S-TAB> <C-p>
inoremap df <BS>
inoremap fd <DEL>
"noremap DK kdd
"noremap DJ jddk
" ; is my main n leader
noremap ;; :update<CR>
" recover normal ; behavior
noremap ;f ;
" to be more mnemonic consistent
noremap ;b ,
noremap ;n :bNext<CR>
" https://stackoverflow.com/a/2084221
noremap ;: :OverCommandLine<CR>
" spell stuff
noremap ;son :setlocal spell spelllang=en<CR>:call MySetSpellColors()<CR>
noremap ;soff :setlocal spell spelllang=<CR>
noremap <expr> ;st (&spelllang == '' ? ':set spelllang=en<CR>' : ':set spelllang=""<CR>')
noremap ;sf viw<ESC>a<C-X><C-s>
" I'm dumb
"noremap ;sf h/\s\\|\n<CR>:let @/ = ''<CR>i<C-X><C-s>
" https://stackoverflow.com/a/48721323
" + fix for single character word handling
if has('textobjects')
    noremap ;sw yiwwviwp?\s<CR>:let @/ = ''<CR>bviwp
    noremap ;sW yiWWviWp?\s<CR>:let @/ = ''<CR>bviWp
    noremap ;s{ ya{%/{<CR>:let @/ = ''<CR>va{p%?}<CR>:let @/ = ''<CR>va{p
    noremap ;s} ya}%/}<CR>:let @/ = ''<CR>va}p%?}<CR>:let @/ = ''<CR>va}p
else
    silent !echo '[Warning] Need +textobjects to use ;sw[ap]'
endif
nnoremap Q gq
vnoremap Q gq
inoremap <C-Y> <ESC><C-Y>a
inoremap <C-E> <ESC><C-E>a
" <C-\> is my leader for infrequent keys
noremap <C-\>rn :set invrelativenumber<CR>
noremap <C-\>n :set invnumber<CR>
" vimdiff mappings (for git mergetool)
" https://vi.stackexchange.com/questions/2705/create-mappings-that-only-apply-to-diff-mode
" even though &diff is always set for some reason...
nnoremap <expr> gl &diff ? ':diffget LOCAL<CR>]c' : 'gl'
nnoremap <expr> gr &diff ? ':diffget REMOTE<CR>]c' : 'gr'
filetype detect
let g:tex_flavor = 'latex'
inoremap <C-\>^e ê
inoremap <C-\>"o ö
" https://stackoverflow.com/questions/2600783/how-does-the-vim-write-with-sudo-trick-work
" Allow saving of files as sudo
cmap w!! w !sudo tee > /dev/null %

" fold settings
" https://stackoverflow.com/a/54739345
augroup remember_folds
    autocmd!
    autocmd BufWinLeave ?* mkview
    autocmd BufWinEnter ?* silent! loadview
augroup END
" # Function to permanently delete views created by 'mkview'
function! MyDeleteView()
    let path = fnamemodify(bufname('%'),':p')
    " vim's odd =~ escaping for /
    let path = substitute(path, '=', '==', 'g')
    if empty($HOME)
    else
        let path = substitute(path, '^'.$HOME, '\~', '')
    endif
    let path = substitute(path, '/', '=+', 'g') . '='
    " view directory
    let path = &viewdir.'/'.path
    call delete(path)
    echo 'Deleted: '.path
    " my addition: vim gets stuck in diff mode a lot for some reason
    diffoff
endfunction
" # Command Delview (and it's abbreviation 'delview')
command Delview call MyDeleteView() | set foldmethod=indent | set foldcolumn=0 | set foldlevel=99
command DelviewHard call MyDeleteView() | set foldmethod=indent | set foldcolumn=0 | set foldlevel=99 | noautocmd q
" Lower-case user commands: http://vim.wikia.com/wiki/Replace_a_builtin_command_using_cabbrev
cabbrev delview <c-r>=(getcmdtype()==':' && getcmdpos()==1 ? 'Delview' : 'delview')<CR>

" undo-persistence
" modified from undotree 's README
" and :help undo-persistence
if has('persistent_undo')
    let g:myUndodir = expand('~/.vim/undodir')
    " TODO: could be more robust
    " eg if ~/.vim/undodir exists but is a regular file
    " some of the perl code below handles this somehow
    if !isdirectory(g:myUndodir)
        if !mkdir(g:myUndodir, 'p', 0700)
            silent !echo '[Error] undo-persistence: see TODO s'
        endif
    endif
    let &undodir=g:myUndodir
    " But undodir doesn't actually work
    set undodir=~/.vim/undodir
    func ReadUndo()
        " :(
        let undofile__ = g:myUndodir .. '/' .. expand('%:p:gs?/?%?.un~')
        let undofile_ = g:myUndodir .. '/' .. expand('%:p:gs?/?\\%?.un~')
        if filereadable(undofile__)
            silent execute "rundo" undofile_
        endif
    endfunc
    func WriteUndo()
        let undofile_ = g:myUndodir .. '/' .. expand('%:p:gs?/?\\%?.un~')
        execute 'wundo' undofile_
    endfunc
    augroup persistent_undo
        autocmd BufReadPost ?* call ReadUndo()
        autocmd BufWritePost ?* call WriteUndo()
    augroup END
else
    silent !echo '[Warning] Need +persistent_undo'
endif

" more highlighting matches
call matchadd('Todo', '\<notes\?:\?\>\c')
call matchadd('Todo', '\<todo:\?\>\c')

" spell stuff cont
" undercurl not available on term usually
" apparantly nvim doesn't understand term or ctermul
function! MySetSpellColors()
    if !has('nvim')
        hi SpellBad term=standout cterm=underline ctermul=Red
        hi SpellCap term=underline cterm=underline ctermul=Blue
        hi SpellRare term=underline cterm=underline ctermul=Magenta
        hi SpellLocal term=underline cterm=underline ctermul=Cyan
    endif
    hi SpellBad gui=undercurl guisp=Red
    hi SpellCap gui=undercurl guisp=Blue
    hi SpellRare gui=undercurl guisp=Magenta
    hi SpellLocal gui=undercurl guisp=Cyan
endfunction

" my perl stuff
" neovim perl provider
if has('nvim')
    let g:perl_host_provider = '/usr/bin/perl'
endif
if has('perl')
    if has('nvim')
        perl << EOF
        use strict;
        use warnings FATAL => 'all', NONFATAL => 'redefine';

        # NOTE: nvim's VIM::Eval does not dereference like vim does
        sub SEval($){
            # TODO: Does this make sense? Trying to patch an error nvim throws
            VIM::DoCommand("let g:myPerlArg_ = exists('$_[0]')");
            my ($_success, $exists) = VIM::Eval('g:myPerlArg_');
            ($exists) ? VIM::Eval(shift) : return;
        }
        sub AEval($){
            # TODO: Does this make sense? Trying to patch an error nvim throws
            VIM::DoCommand("let g:myPerlArg = exists('$_[0]')");
            my ($_success, $exists) = VIM::Eval('g:myPerlArg');
            if($exists){
                my ($success, $e) = VIM::Eval(shift);
                ($success, "@$e");
            }
            else{
                return;
            }
        }
EOF
    " normal vim
    else
        perl << EOF
        use strict;
        use warnings FATAL => 'all', NONFATAL => 'redefine';

        sub SEval($){
            VIM::Eval(shift);
        }
        sub AEval($){
            VIM::Eval(shift);
        }
EOF
    endif
endif
" (keeping this here for future ref)
if has('perl')
    perl << EOF
    use strict;
    use warnings FATAL => 'all', NONFATAL => 'redefine';

    sub mySub{
        print (glob q(*.pl));
        VIM::Msg("Hello");
    }
EOF
    function! MyFunc()
        perl mySub
    endfunction
endif

" vim-plug
" for auto-installation
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !mkdir -p ~/.vim/autoload && wget -O ~/.vim/autoload/plug.vim
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  augroup vim_plug
      autocmd!
      autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
  augroup END
endif
" list of plugins

" LanguageClient-neovim variables
let g:myLSRunning = 0
let g:myLSLangs = []
if has('perl')
    perl <<EOF
    use strict;
    use warnings FATAL => 'all', NONFATAL => 'redefine';

    my $lsCmds = <<~"__EOF"
        let g:LanguageClient_serverCommands = {
        'rust': ['~/.cargo/bin/rustup', 'run', 'stable', 'rls'],
        'haskell': ['haskell-language-server-wrapper', '--lsp'],
        'reason': ['/home/hejohns/.vim/language-server/rls-linux/reason-language-server', '--stdio'],
        'ocaml': ['ocamllsp'],
        'perl': ['pls'],
        'tex': ['texlab'],
        'nix': ['rnix-lsp'],
        'go': ['gopls'],
        }
        __EOF
        ;
    my @rows = split /\n/, $lsCmds; # for @langs
    $lsCmds =~ s/\n//g; # vim doesn't like the newlines
    VIM::DoCommand($lsCmds);
    my @langs = map {/'(\S+)':/; $1} grep {/'(\S+)':/} @rows;
    my @myLSLangs = map {"'$_',"} @langs;
    VIM::DoCommand("let g:myLSLangs = [@myLSLangs]");
EOF
else
    silent !echo '[Warning] Need +perl to initialize language server correctly'
endif
call plug#begin('~/.vim/plugged')
Plug 'https://github.com/xavierd/clang_complete.git', {'for': ['c', 'cpp']}
Plug 'vim-perl/vim-perl', { 'for': 'perl', 'do': 'make clean carp dancer highlight-all-pragmas moose test-more try-tiny' }
Plug 'davidhalter/jedi-vim', {'for': 'python'}
Plug 'autozimu/LanguageClient-neovim', {
    \ 'for': g:myLSLangs,
    \ 'branch': 'next',
    \ 'do': 'bash install.sh',
    \ }
Plug 'junegunn/fzf'
let g:myDeopleteLangs = g:myLSLangs + ['vim', 'gitcommit']
if has('nvim')
    Plug 'Shougo/deoplete.nvim', {'for': g:myDeopleteLangs, 'do': ':UpdateRemotePlugins'}
" for vim 8 with python
else
    Plug 'Shougo/deoplete.nvim', {'for': g:myDeopleteLangs}
    Plug 'roxma/nvim-yarp', {'for': g:myDeopleteLangs}
    Plug 'roxma/vim-hug-neovim-rpc', {'for': g:myDeopleteLangs}
    " the path to python3 is obtained through executing `:echo exepath('python3')` in vim
    let g:python3_host_prog = exepath('python3')
    let g:deoplete#enable_at_startup = 1
endif
Plug 'lervag/vimtex', {'for': 'tex'}
Plug 'maxboisvert/vim-simple-complete'
Plug 'JuliaEditorSupport/julia-vim'
Plug 'https://github.com/tpope/vim-fugitive'
Plug 'jordwalke/vim-reasonml', {'for': 'reason'}
Plug 'scrooloose/syntastic'
Plug 'osyo-manga/vim-over'
Plug 'alx741/vim-hindent', {'for': 'haskell'}
Plug 'tpope/vim-surround'
Plug 'rust-lang/rust.vim', {'for': 'rust'}
" requires >= 8.0.902
Plug 'mhinz/vim-signify'
Plug 'LnL7/vim-nix', {'for': 'nix'}
Plug 'mbbill/undotree'
Plug 'tpope/vim-dispatch', {'for': 'tex'} " NOTE: but we may want for more langs later
if !has('nvim')
    Plug 'vim-utils/vim-man' " replaces ``builtin'' :Man ?
endif
call plug#end()

" clang_complete
" TODO: move the option setting to no_LS_opt2ft
" this is how I used to write filetype specific options, but if I start vim on
" another filetype and open a c buffer, none of the right things get set
" I just don't feel like fixing it rn

" set g:clang_library_path with highest clang version available
if has('perl')
    perl <<EOF
    use strict;
    use warnings FATAL => 'all', NONFATAL => 'redefine';

    sub smartCmp{
        $a =~ m/usr\/lib\/llvm-(\d+)\/lib/ or die "Failed to match. $!";
        my $aN = $1;
        $b =~ m/usr\/lib\/llvm-(\d+)\/lib/ or die "Failed to match. $!";
        my $bN = $1;
        $bN <=> $aN; #descending sort
    }
    my @clang_library_path = glob '/usr/lib/llvm-*/lib';
    @clang_library_path = sort smartCmp @clang_library_path;
    if(@clang_library_path){
        VIM::DoCommand(":let g:clang_library_path = '" . $clang_library_path[0] . "'");
    }
    my @clangLangs = qw(c cpp);
    my $success; #don't bother...
    ($success, my $filetype) = SEval('&filetype');
    $filetype //= '';
    if(grep {/$filetype/} @clangLangs){
        my @clangCmds = split /\n/, <<~"__EOF"
            set omnifunc='ClangComplete'
            set completefunc='ClangComplete'
            let g:clang_complete_auto = 1
            let g:clang_complete_copen = 1
            let g:clang_complete_pattern = 1
            __EOF
            ;
        map {VIM::DoCommand($_)} @clangCmds;
    }
EOF
else
    silent !echo '[Warning] Need +perl to initialize clang_complete correctly'
endif

" LanguageClient-neovim
" (and any pip stuff)
" (and any filetype specific options)
if has('perl')
    function FiletypeSpecific(ft)
        augroup filetype_specific
            autocmd! * <buffer>
        augroup END
        let g:myPerlArg = a:ft
        if !(exists('g:myDisableFTSpecific') && g:myDisableFTSpecific == 1)
            perl filetype_options
        endif
    endfunction
    function MyDisableFTSpecific()
        let g:myDisableFTSpecific = 1
    endfunction
    perl << EOF
    use strict;
    use warnings FATAL => 'all', NONFATAL => 'redefine';

    my ($_success_, $lsLangs) = AEval('g:myLSLangs');
    my @lsLangs = split(' ', $lsLangs);
    ($_success_, my $deopleteLangs) = AEval('g:myDeopleteLangs');
    my @deopleteLangs = split(' ', $deopleteLangs);
    my %no_LS_opt2ft = (
        'autocmd filetype_specific BufEnter <buffer> setlocal shiftwidth=2' =>
        ['haskell', 'cabal', 'cabalconfig', 'cabalproject', 'nix'],
        # use deoplete so vim stops hanging on autocomplete
        # still needed for some reason even with g:deoplete#enable_at_startup
        'call deoplete#enable()' =>
        [@deopleteLangs],
        'inoremap <buffer> <expr> <TAB> pumvisible() ? "\<C-n>" : <SID>check_back_space() ? "\<TAB>" : deoplete#can_complete() ? deoplete#complete() : deoplete#manual_complete()' =>
        [@deopleteLangs],
        'inoremap <buffer> <expr> <S-TAB> pumvisible() ? "\<C-p>" : <SID>check_back_space() ? "\<TAB>" : deoplete#can_complete() ? deoplete#complete() : deoplete#manual_complete()' =>
        [@deopleteLangs],
        # deoplete-options-num_processes
        "call deoplete#custom#var('around', {'range_above': 10000, 'range_below': 10000})" =>
        [@deopleteLangs],
        # NOTE: deoplete by default uses all sources?
        "call deoplete#custom#option('sources', {'_': []})" =>
        [@deopleteLangs],
        "call deoplete#custom#buffer_option('num_processes', 2)" =>
        [@deopleteLangs],
        'autocmd filetype_specific BufWritePost <buffer> call MyDispatchOnBufWrite()' =>
        ['tex'],
        'nnoremap <buffer> <C-\>ll :let g:myDispatchToggle = (exists("g:myDispatchToggle") && g:myDispatchToggle) ? 0 : 1<CR>' =>
        ['tex'],
        'nnoremap <buffer> ysc <Plug>(vimtex-cmd-create)' =>
        ['tex'],
        'vnoremap <buffer> ysc <Plug>(vimtex-cmd-create)' =>
        ['tex'],
        'nnoremap <buffer> ysiWc viW<Plug>(vimtex-cmd-create)' =>
        ['tex'],
        'vnoremap <buffer> ysiWc viW<Plug>(vimtex-cmd-create)' =>
        ['tex'],
        'nnoremap <buffer> ysi{c vi{<Plug>(vimtex-cmd-create)' =>
        ['tex'],
        'vnoremap <buffer> ysi{c vi{<Plug>(vimtex-cmd-create)' =>
        ['tex'],
        'nnoremap <buffer> ysi}c vi}<Plug>(vimtex-cmd-create)' =>
        ['tex'],
        'vnoremap <buffer> ysi}c vi}<Plug>(vimtex-cmd-create)' =>
        ['tex'],
        'call MyVimtexOptions()' =>
        ['tex'],
        # TODO: some ft autocmd (not mine) needs to fire late to get vimtex conceal to work correctly
        # this hack ``just works''
        'setlocal filetype=tex' =>
        ['tex'],
        # vimtex-complete-auto
        "call deoplete#custom#var('omni', 'input_patterns', {'tex': g:vimtex#re#deoplete})" =>
        ['tex'],
        'call EnableL2U()' =>
        ['tex'],
    );
    my %LS_opt2ft = (
        'nnoremap <buffer> ;ls :call LanguageClient_contextMenu()<CR>' =>
        [@lsLangs],
        'nnoremap <buffer> gd :call LanguageClient#textDocument_definition()<CR>' =>
        [(grep {!/perl/} @lsLangs)],
        'nnoremap <buffer> K :call LanguageClient#textDocument_hover()<CR>' =>
        [(grep {!/perl/} @lsLangs)],
        'autocmd filetype_specific BufWritePre *.go :call LanguageClient#textDocument_formatting_sync()' =>
        ['go'],
    );

    sub filetype_options{
        my $success;
        ($success, my $filetype) = SEval('g:myPerlArg');
        $filetype //= '';
        if($filetype eq 'plaintex'){
            VIM::DoCommand("silent !echo '[Error] &ft plaintex should be masqueraded as tex'");
        }
        foreach my $k (keys %no_LS_opt2ft){
            if(grep {/$filetype/} @{$no_LS_opt2ft{$k}}){
                VIM::DoCommand($k);
            }
        }
        RETRY:
        ($success, my $ls_running) = SEval('g:myLSRunning');
        if($ls_running){
            # TODO: check LS executable is present or raise message
            # and maybe autoinstall? (if we nix it enough)
            foreach my $k (keys %LS_opt2ft){
                if(grep {/$filetype/} @{$LS_opt2ft{$k}}){
                    VIM::DoCommand($k);
                }
            }
        }
        else{
            my $success; #don't bother...
            ($success, my $lsLangs) = AEval('g:myLSLangs');
            my @lsLangs = split(' ', $lsLangs);
            push @lsLangs, qw(vim); # vim-vint requires pip install
            ($success, my $filetype) = SEval('&filetype');
            $filetype //= '';
            # NOTE: can't figure out why plaintex shows up
            # but it messes up the buffer local remappings
            $filetype =~ s/plaintex/tex/;
            VOID_EVAL_LAST_WARNINGS: {
                if($filetype && grep {/$filetype/} @lsLangs){
                    my $pipExists = `sh -c 'command -v pip3' 2>&1`;
                    if($? >> 8){
                        VIM::DoCommand("silent !echo '[Warning] `pip3` not found. Not using language server.'");
                        last VOID_EVAL_LAST_WARNINGS;
                    }
                    my @pipRequire = qw(vim-vint);
                    for (@pipRequire){
                        my $pipHas = `pip3 list 2>&1 | grep '$_' 2>&1`;
                        if($? >> 8){
                            my $pipSuccess = `pip3 install $_ 2>&1`;
                            if($? >> 8){
                                VIM::DoCommand("silent !echo '[Warning] `pip3 install $_` failed'");
                                last VOID_EVAL_LAST_WARNINGS;
                            }
                        }
                    }
                    # https://github.com/jaredly/reason-language-server
                    # (which we're no longer using)
                    #my $pipHasNeovim = `pip3 list 2>&1 | grep 'neovim' 2>&1`;
                    #if($? >> 8){
                    #    my $pipSuccess = `pip3 install neovim 2>&1`;
                    #    if($? >> 8){
                    #        VIM::DoCommand("silent !echo '[Warning] `pip3 install neovim` failed. Not using langauge server.'");
                    #        last VOID_EVAL_LAST_WARNINGS;
                    #    }
                    #}
                    #VIM::DoCommand('pythonx import neovim');
                    # enable autocomplete
                    VIM::DoCommand("let g:myLSRunning = 1");
                    VIM::DoCommand("command LSRename :call LanguageClient#textDocument_rename()<CR>");
                    VIM::DoCommand("command LSTDef :call LanguageClient#textDocument_typeDefinition()<CR>");
                    goto RETRY;
                }
            }
        }
    }
EOF
else
    silent !echo '[Warning] Need +perl to set filetype specific options'
    silent !echo '[Warning] Need +perl to initialize language server correctly'
endif
augroup filetype_options
    autocmd!
    autocmd FileType plaintex setlocal filetype=tex
    autocmd BufEnter * execute 'call FiletypeSpecific("' . &filetype . '")'
augroup END

" vimtex
function MyVimtexOptions()
    if &filetype ==# 'tex' || &filetype ==# 'plaintex'
        if executable('latexmk')
            if executable('okular')
                let g:vimtex_view_general_viewer = 'okular'
                let g:vimtex_view_general_options = '--unique file:@pdf\#src:@line@tex'
            elseif executable('evince')
                let g:vimtex_view_general_viewer = 'evince'
            elseif executable('atril')
                let g:vimtex_view_general_viewer = 'atril'
            else
                silent !echo '[Warning] no suitable pdf viewer found-- prepare for havoc'
            endif
            if executable('lualatex')
            " _ value modified
            let g:vimtex_compiler_latexmk_engines = {
                \ '_'                : '-pdflua',
                \ 'pdflatex'         : '-pdf',
                \ 'dvipdfex'         : '-pdfdvi',
                \ 'lualatex'         : '-lualatex',
                \ 'xelatex'          : '-xelatex',
                \ 'context (pdftex)' : '-pdf -pdflatex=texexec',
                \ 'context (luatex)' : '-pdf -pdflatex=context',
                \ 'context (xetex)'  : '-pdf -pdflatex=''texexec --xtx''',
                \}
            else
                silent !echo '[Warning] please install lualatex'
            endif
            if !has('nvim')
                if has('clientserver')
                    if empty(v:servername) && exists('*remote_startserver')
                        silent! call remote_startserver('VIM')
                    endif
                else
                    silent !echo '[Warning] need +clientserver for vimtex on (not n)vim'
                endif
            endif
        else
            silent !echo '[Warning] vimtex requires latexmk.'
        endif
    let g:vimtex_syntax_conceal = {
                \ 'accents': 1,
                \ 'ligatures': 1,
                \ 'cites': 1,
                \ 'fancy': 1,
                \ 'greek': 1,
                \ 'math_bounds': 1,
                \ 'math_delimiters': 1,
                \ 'math_fracs': 1,
                \ 'math_super_sub': 1,
                \ 'math_symbols': 1,
                \ 'sections': 0,
                \ 'styles': 1,
                \}
    let g:vimtex_syntax_conceal_cites = {
                \ 'type': 'brackets',
                \ 'icon': '📖',
                \ 'verbose': v:true,
                \}
    setlocal conceallevel=2
    setlocal concealcursor=
    " tex-conceal
    let g:tex_conceal='abdmgs'
    endif
endfunction

" julia latex2unicode
" [let g:latex_to_unicode_tab = "off"] to disable julia tab completion
let g:latex_to_unicode_tab = 'off'
" doesn't work for some reason
function EnableL2U()
    let g:latex_to_unicode_eager = 0
    let g:latex_to_unicode_auto = 1 " enable space driven auto completion
    let g:latex_to_unicode_file_types = '.*' " on all
    call LaTeXtoUnicode#Init()
    call LaTeXtoUnicode#Enable()
endfunction
command L2UEnable call EnableL2U()
function DisableL2U()
    call LaTeXtoUnicode#Disable()
endfunction
command L2UDisable call DisableL2U()
nnoremap <C-\>lon :call EnableL2U()<CR>
nnoremap <C-\>loff :call DisableL2U()<CR>

" fugitive
command GD vertical Gdiff
command GS vertical Git

" syntastic
let g:syntastic_vim_checkers = ['vint']
let g:syntastic_mode_map = {
            \ 'mode': 'passive',
            \ 'active_filetypes': ['reason', 'vim', 'pod', 'rust'],
            \ 'passive_filetypes': []}

" (help statusline)
let g:mystatusline = ''
function! MyStatusline()
    " !has('nvim') -- neovim doesn't seem to like this for some reason
    if has('perl') && !has('nvim')
        perl << EOF
        use strict;
        use warnings FATAL => 'all', NONFATAL => 'redefine';
        chomp(my $time = `date '+%r'`);
        $time = "[$time]";
        my $statusline = $time;
        VIM::DoCommand("let g:mystatusline='$statusline'");
EOF
    endif
    return g:mystatusline
endfunction
" Emulate default statusline
set statusline=%f\ %y%r%m%<\ %{FugitiveStatusline()}\ %{MyStatusline()}%=
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
set statusline+=\ %-12.(%l,%c%V%)\ %P

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" vim-signify
set updatetime=100
let g:signify_sign_change = '∂'
let g:mySignifyDiffToggle = 0
augroup signify_toggle
    autocmd!
augroup END
function! MySignifyDiffToggle()
    if g:mySignifyDiffToggle
        autocmd! signify_toggle User Signify
    else
        autocmd signify_toggle User Signify SignifyHunkDiff
    endif
    let g:mySignifyDiffToggle = !g:mySignifyDiffToggle
endfunction
nnoremap ;sigp :call MySignifyDiffToggle()<CR>
nnoremap ;sigt :SignifyToggle<CR>
nnoremap ;sigu :SignifyHunkUndo<CR>

" undotree
nnoremap ;u :UndotreeToggle<CR>

" vim-dispatch
function MyDispatchOnBufWrite()
    if &ft == 'tex'
        if has('perl')
            perl << EOF
            use strict;
            use warnings FATAL => 'all', NONFATAL => 'redefine';
            if(-e 'Makefile' || -e 'makefile'){
                my ($_success, $myDispatchToggle) = SEval('g:myDispatchToggle');
                $myDispatchToggle //= 0;
                if($myDispatchToggle){
                    VIM::DoCommand(':Make');
                }
            }
EOF
        else
            silent !echo '[Warning] Need +perl to :Make on BufWritePost'
        endif
    endif
endfunc

" deoplete
" deoplete-faq-config
function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col-1] =~# '\s'
endfunction
