syntax on
colorscheme desert
set tags=tags
set autoindent
set expandtab
set shiftwidth=4
set cindent
set formatoptions +=cro
set hlsearch
set nopaste
set foldmethod=indent
set foldcolumn=0
set foldlevel=99
set foldclose=all
set ruler
set vb
inoremap kj <ESC>
inoremap jk <C-w>
inoremap <tab> <C-n>
inoremap <S-tab> <C-p>
inoremap df <BS>
noremap ;; :update<cr>
noremap <C-l><C-l> :set invrelativenumber<CR>
noremap <C-l> :set invnumber<CR>

" fold settings
augroup remember_folds
    autocmd!
    autocmd BufWinLeave * mkview
    autocmd BufWinEnter * silent! loadview
augroup END
" # Function to permanently delete views created by 'mkview'
function! MyDeleteView()
    let path = fnamemodify(bufname('%'),':p')
    " vim's odd =~ escaping for /
    let path = substitute(path, '=', '==', 'g')
    if empty($HOME)
    else
        let path = substitute(path, '^'.$HOME, '\~', '')
    endif
    let path = substitute(path, '/', '=+', 'g') . '='
    " view directory
    let path = &viewdir.'/'.path
    call delete(path)
    echo "Deleted: ".path
endfunction
" # Command Delview (and it's abbreviation 'delview')
command Delview call MyDeleteView() | set foldmethod=indent | set foldcolumn=0 | set foldlevel=99
" Lower-case user commands: http://vim.wikia.com/wiki/Replace_a_builtin_command_using_cabbrev
cabbrev delview <c-r>=(getcmdtype()==':' && getcmdpos()==1 ? 'Delview' : 'delview')<CR>

" my perl stuff
" (keeping this here for future ref)
if has('perl')
    perl << EOF
    use strict;
    use warnings FATAL => 'all';
    use warnings NONFATAL => 'redefine';

    sub mySub{
        print (glob q(*.pl));
        VIM::Msg("Hello");
    }
EOF
    function! MyFunc()
        perl mySub
    endfunction
endif

" vim-plug
" for auto-installation
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !mkdir -p ~/.vim/autoload && wget -O ~/.vim/autoload/plug.vim
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
" list of plugins
call plug#begin('~/.vim/plugged')
Plug 'https://github.com/xavierd/clang_complete.git'
Plug 'vim-perl/vim-perl', { 'for': 'perl', 'do': 'make clean carp dancer highlight-all-pragmas moose test-more try-tiny' }
Plug 'davidhalter/jedi-vim'
Plug 'reasonml-editor/vim-reason-plus'
Plug 'autozimu/LanguageClient-neovim', {
    \ 'branch': 'next',
    \ 'do': 'bash install.sh',
    \ }
if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
" for vim 8 with python
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
  " the path to python3 is obtained through executing `:echo exepath('python3')` in vim
  let g:python3_host_prog = "/usr/bin/python3"
endif
call plug#end()

" clang_complete
set omnifunc='ClangComplete'
set completefunc='ClangComplete'
let g:clang_complete_auto = 1
let g:clang_complete_copen = 1
let g:clang_complete_pattern = 1
" set g:clang_library_path with highest clang version available
if has('perl')
    perl << EOF
    use strict;
    use warnings FATAL => 'all', NONFATAL => 'redefine';

    my @clang_library_path = glob '/usr/lib/llvm-*/lib';
    @clang_library_path = sort {$b cmp $a} @clang_library_path;
    VIM::DoCommand(':let g:clang_library_path = \''
            .  $clang_library_path[0] . '\'');
EOF
else
    echoerr 'Need +perl to initialize clang_complete correctly'
endif

" vim-reason-plus
silent !pip3 install neovim > /dev/null 2>&1
if v:shell_error
    echoerr '`pip3` failed. Not using langauge server.'
else
    pythonx import neovim
    let g:LanguageClient_serverCommands = {
        \ 'reason': ['/home/hejohns/.vim/langauge-server/rls-linux/reason-language-server'],
        \ 'haskell': ['haskell-language-server-wrapper', '--lsp'],
        \ }

    " enable autocomplete
    let g:deoplete#enable_at_startup = 1
endif
