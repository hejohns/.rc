syntax on
colorscheme solarized
set encoding=utf8
set tags=tags
set autoindent
set expandtab
set tabstop=8
" default shiftwidth-- langauge specific below
set shiftwidth=4
set cindent
set formatoptions +=cro
set hlsearch
set nopaste
set foldmethod=indent
set foldcolumn=0
set foldlevel=99
set foldclose=all
set ruler
set vb
set autoread
set showcmd
inoremap kj <ESC>
inoremap jk <C-w>
inoremap lk <ESC>ll
inoremap <tab> <C-n>
inoremap <S-tab> <C-p>
inoremap df <BS>
noremap DK kdd
noremap DJ jddk
noremap ;; :update<CR>
nnoremap Q gq
vnoremap Q gq
inoremap <C-Y> <ESC><C-Y>a
inoremap <C-E> <ESC><C-E>a
set relativenumber
noremap <C-l><C-l> :set invrelativenumber<CR>
set number
noremap <C-l> :set invnumber<CR>
" vimdiff mappings (for git mergetool)
" https://vi.stackexchange.com/questions/2705/create-mappings-that-only-apply-to-diff-mode
" even though &diff is always set for some reason...
nnoremap <expr> gl &diff ? ':diffget LOCAL<CR>]c' : 'gl'
nnoremap <expr> gr &diff ? ':diffget REMOTE<CR>]c' : 'gr'
filetype detect
let g:tex_flavor = "latex"
inoremap <C-\>^e ê
inoremap <C-\>"o ö
" https://stackoverflow.com/questions/2600783/how-does-the-vim-write-with-sudo-trick-work
" Allow saving of files as sudo
cmap w!! w !sudo tee > /dev/null %

autocmd FileType haskell setlocal shiftwidth=2
autocmd FileType cabal setlocal shiftwidth=2
autocmd FileType cabalconfig setlocal shiftwidth=2
autocmd FileType cabalproject setlocal shiftwidth=2
autocmd FileType plaintex setlocal filetype=tex

" fold settings
" I must've forgotten to paste the link...
augroup remember_folds
    autocmd!
    autocmd BufWinLeave * mkview
    autocmd BufWinEnter * silent! loadview
augroup END
" # Function to permanently delete views created by 'mkview'
function! MyDeleteView()
    let path = fnamemodify(bufname('%'),':p')
    " vim's odd =~ escaping for /
    let path = substitute(path, '=', '==', 'g')
    if empty($HOME)
    else
        let path = substitute(path, '^'.$HOME, '\~', '')
    endif
    let path = substitute(path, '/', '=+', 'g') . '='
    " view directory
    let path = &viewdir.'/'.path
    call delete(path)
    echo "Deleted: ".path
endfunction
" # Command Delview (and it's abbreviation 'delview')
command Delview call MyDeleteView() | set foldmethod=indent | set foldcolumn=0 | set foldlevel=99
" Lower-case user commands: http://vim.wikia.com/wiki/Replace_a_builtin_command_using_cabbrev
cabbrev delview <c-r>=(getcmdtype()==':' && getcmdpos()==1 ? 'Delview' : 'delview')<CR>

" my perl stuff
" (keeping this here for future ref)
if has('perl')
    perl << EOF
    use strict;
    use warnings FATAL => 'all', NONFATAL => 'redefine';

    sub mySub{
        print (glob q(*.pl));
        VIM::Msg("Hello");
    }
EOF
    function! MyFunc()
        perl mySub
    endfunction
endif

" vim-plug
" for auto-installation
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !mkdir -p ~/.vim/autoload && wget -O ~/.vim/autoload/plug.vim
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
" list of plugins
call plug#begin('~/.vim/plugged')
Plug 'https://github.com/xavierd/clang_complete.git', {'for': ['c', 'cpp']}
Plug 'vim-perl/vim-perl', { 'for': 'perl', 'do': 'make clean carp dancer highlight-all-pragmas moose test-more try-tiny' }
Plug 'davidhalter/jedi-vim', {'for': 'python'}
Plug 'reasonml-editor/vim-reason-plus', {'for': 'reason'}
Plug 'autozimu/LanguageClient-neovim', {
    \ 'for': ['haskell', 'reason'],
    \ 'branch': 'next',
    \ 'do': 'bash install.sh',
    \ }
Plug 'junegunn/fzf'
if has('nvim')
    Plug 'Shougo/deoplete.nvim', { 'for': ['haskell', 'reason'], 'do': ':UpdateRemotePlugins' }
" for vim 8 with python
else
    Plug 'Shougo/deoplete.nvim', {'for': ['haskell', 'reason']}
    Plug 'roxma/nvim-yarp', {'for': ['haskell', 'reason']}
    Plug 'roxma/vim-hug-neovim-rpc', {'for': ['haskell', 'reason']}
    " the path to python3 is obtained through executing `:echo exepath('python3')` in vim
    let g:python3_host_prog = exepath('python3')
endif
Plug 'lervag/vimtex', {'for': 'tex'}
Plug 'maxboisvert/vim-simple-complete'
Plug 'JuliaEditorSupport/julia-vim'
call plug#end()

" clang_complete
" set g:clang_library_path with highest clang version available
if has('perl')
    perl <<EOF
    use strict;
    use warnings FATAL => 'all', NONFATAL => 'redefine';

    sub smartCmp{
        $a =~ m/usr\/lib\/llvm-(\d+)\/lib/ or die "Failed to match. $!";
        my $aN = $1;
        $b =~ m/usr\/lib\/llvm-(\d+)\/lib/ or die "Failed to match. $!";
        my $bN = $1;
        $bN <=> $aN; #descending sort
    }
    my @clang_library_path = glob '/usr/lib/llvm-*/lib';
    @clang_library_path = sort smartCmp @clang_library_path;
    if(@clang_library_path){
        VIM::DoCommand(":let g:clang_library_path = '" . $clang_library_path[0] . "'");
    }
    my @clangLangs = qw(c cpp);
    my $success; #don't bother...
    ($success, my $filetype) = VIM::Eval('&filetype');
    if(grep {/$filetype/} @clangLangs){
        my @clangCmds = split /\n/, <<~"__EOF"
            set omnifunc='ClangComplete'
            set completefunc='ClangComplete'
            let g:clang_complete_auto = 1
            let g:clang_complete_copen = 1
            let g:clang_complete_pattern = 1
            __EOF
            ;
        map {VIM::DoCommand($_)} @clangCmds;
    }
EOF
else
    silent !echo '[Warning] Need +perl to initialize clang_complete correctly'
endif

" vim-reason-plus
if has('perl')
    perl <<EOF
    use strict;
    use warnings FATAL => 'all', NONFATAL => 'redefine';

    my @lsLangs = ('haskell', 'reason');
    my $success; #don't bother...
    ($success, my $filetype) = VIM::Eval('&filetype');
    VOID_EVAL_LAST_WARNINGS:
    {
        if($filetype && grep {/$filetype/} @lsLangs){
            my $pipExists = `sh -c 'command -v pip3' 2>&1`;
            if($? >> 8){
                VIM::DoCommand("silent !echo '[Warning] `pip3` not found. Not using language server.'");
                last VOID_EVAL_LAST_WARNINGS;
            }
            my $pipHasNeovim = `pip3 list 2>&1 | grep 'neovim' 2>&1`;
            if($? >> 8){
                my $pipSuccess = `pip3 install neovim 2>&1`;
                if($? >> 8){
                    VIM::DoCommand("silent !echo '[Warning] `pip3 install neovim` failed. Not using langauge server.'");
                    last VOID_EVAL_LAST_WARNINGS;
                }
            }
            VIM::DoCommand('pythonx import neovim');
            # https://github.com/jaredly/reason-language-server
            my $lsCmds = <<~"__EOF"
                let g:LanguageClient_serverCommands = {
                'haskell': ['haskell-language-server-wrapper', '--lsp'],
                'reason': ['/home/hejohns/.vim/langauge-server/rls-linux/reason-language-server', '--stdio'],
                'ocaml': ['ocamllsp'],
                }
                __EOF
                ;
            $lsCmds =~ s/\n//g;
            VIM::DoCommand($lsCmds);
            # enable autocomplete
            VIM::DoCommand("let g:deoplete#enable_at_startup = 1");
        }
    }
EOF
else
    silent !echo '[Warning] Need +perl to initialize language server correctly'
endif

" vimtex
if &filetype ==# "tex" || &filetype ==# "plaintex"
    if executable('latexmk')
        if executable('evince')
            let g:vimtex_view_general_viewer = 'evince'
        elseif executable('okular')
            let g:vimtex_view_general_viewer = 'okular'
        elseif executable('atril')
            let g:vimtex_view_general_viewer = 'atril'
        else
            silent !echo '[Warning] no suitable pdf viewer found-- prepare for havoc'
        endif
        if executable('lualatex')
        " _ value modified
        let g:vimtex_compiler_latexmk_engines = {
            \ '_'                : '-pdflua',
            \ 'pdflatex'         : '-pdf',
            \ 'dvipdfex'         : '-pdfdvi',
            \ 'lualatex'         : '-lualatex',
            \ 'xelatex'          : '-xelatex',
            \ 'context (pdftex)' : '-pdf -pdflatex=texexec',
            \ 'context (luatex)' : '-pdf -pdflatex=context',
            \ 'context (xetex)'  : '-pdf -pdflatex=''texexec --xtx''',
            \}
        else
            silent !echo '[Warning] please install lualatex'
        endif
    else
        silent !echo '[Warning] vimtex requires latexmk.'
    endif
endif

" julia latex2unicode
" [let g:latex_to_unicode_tab = off] to disable julia tab completion
" doesn't work for some reason
function EnableL2U()
    let g:latex_to_unicode_eager = 0
    let g:latex_to_unicode_auto = 1 " enable space driven auto completion
    let g:latex_to_unicode_file_types = ".*" " on all 
    call LaTeXtoUnicode#Init()
    call LaTeXtoUnicode#Enable()
endfunction
command L2UEnable call EnableL2U()
function DisableL2U()
    call LaTeXtoUnicode#Disable()
endfunction
command L2UDisable call DisableL2U()
