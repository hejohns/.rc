set encoding=utf8
scriptencoding utf8

" vim-plug
" for auto-installation
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !mkdir -p ~/.vim/autoload && wget -O ~/.vim/autoload/plug.vim
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  augroup vim_plug
      autocmd!
      autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
  augroup END
endif
" LanguageClient-neovim variables
let g:myLSRunning = 0
let g:myLSLangs = []
if has('perl')
    perl <<EOF
    use strict;
    use warnings FATAL => 'all', NONFATAL => 'redefine';

    sub executable{
        `sh -c 'command -v $_[0]' 2>&1`;
        return !($? >> 8);
    }

    my $lsCmds = <<~"__EOF"
        let g:LanguageClient_serverCommands = {
        'rust': ['~/.cargo/bin/rustup', 'run', 'stable', 'rls'],
        'haskell': ['haskell-language-server-wrapper', '--lsp'],
        'reason': ['/home/hejohns/.vim/language-server/rls-linux/reason-language-server', '--stdio'],
        'ocaml': ['ocamllsp'],
        'perl': ['pls'],
        'tex': ['texlab'],
        'nix': ['rnix-lsp'],
        'go': ['gopls'],
        'ruby': ['bundler', 'exec', 'solargraph', 'stdio'],
        'c': ['clangd'],
        'cpp': ['clangd'],
        }
        __EOF
        ;
    my @rows = split /\n/, $lsCmds; # for @langs
    $lsCmds =~ s/\n//g; # vim doesn't like the newlines
    VIM::DoCommand($lsCmds);
    my @langs = map {/'(\S+)':/; $1} grep {/'(\S+)':/} @rows;
    my @myLSLangs = map {"'$_',"} @langs;
    VIM::DoCommand("let g:myLSLangs = [@myLSLangs]");
    # check if commands exist
    my @h = map {/'(\S+)':\s*\[(.+)\]/; ($1, $2)} grep {/'\S+':/; } @rows;
    my %h = @h;
    for my $k (keys %h){
        my $c = join('', (split /,/, $h{$k})); # NOTE: this is extremely buggy, but please just have sane arguments
        $c =~ s/'//g;
        if(!&executable($c)){
            VIM::DoCommand("silent !echo '[warning] Need $c for ft=$k'");
        }
    }
EOF
else
    silent !echo '[warning] Need +perl to initialize language server correctly'
endif
" list of plugins
call plug#begin('~/.vim/plugged')
" moved my vimrc into a plugin
Plug 'hejohns/hejohns-vim', {'branch': 'trunk'}
Plug 'https://github.com/xavierd/clang_complete.git', {'for': ['c', 'cpp']}
Plug 'vim-perl/vim-perl', { 'for': 'perl', 'do': 'make clean carp dancer highlight-all-pragmas moose test-more try-tiny' }
Plug 'davidhalter/jedi-vim', {'for': 'python'}
Plug 'autozimu/LanguageClient-neovim', {
    \ 'for': g:myLSLangs,
    \ 'branch': 'next',
    \ 'do': 'bash install.sh',
    \ }
Plug 'junegunn/fzf', {'do': {-> fzf#install()}}
Plug 'junegunn/fzf.vim'
if has('nvim')
    Plug 'Shougo/deoplete.nvim', {'do': ':UpdateRemotePlugins'}
" for vim 8 with python
else
    Plug 'Shougo/deoplete.nvim'
    Plug 'roxma/nvim-yarp'
    Plug 'roxma/vim-hug-neovim-rpc'
    " the path to python3 is obtained through executing `:echo exepath('python3')` in vim
    let g:python3_host_prog = exepath('python3')
    let g:deoplete#enable_at_startup = 1
endif
Plug 'lervag/vimtex', {'for': 'tex'}
"Plug 'maxboisvert/vim-simple-complete'
Plug 'JuliaEditorSupport/julia-vim'
Plug 'https://github.com/tpope/vim-fugitive'
Plug 'jordwalke/vim-reasonml', {'for': 'reason'}
Plug 'scrooloose/syntastic'
Plug 'osyo-manga/vim-over'
Plug 'alx741/vim-hindent', {'for': 'haskell'}
Plug 'tpope/vim-surround'
Plug 'rust-lang/rust.vim', {'for': 'rust'}
" requires >= 8.0.902
Plug 'mhinz/vim-signify'
Plug 'LnL7/vim-nix', {'for': 'nix'}
Plug 'mbbill/undotree'
Plug 'tpope/vim-dispatch', {'for': ['tex', 'ocaml']} " NOTE: but we may want for more langs later
if !has('nvim')
    Plug 'vim-utils/vim-man' " replaces ``builtin'' :Man ?
endif
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'justinmk/vim-sneak'
Plug 'tpope/vim-repeat'
Plug 'mileszs/ack.vim'
Plug 'chrisbra/unicode.vim'
Plug 'itchyny/calendar.vim'
call plug#end()
" clang_complete
" need to run this before VimEnter to silence clang_complete errors
call hejohns#initialize_clang_complete()
" ## added by OPAM user-setup for vim / base ## 93ee63e278bdfc07d1139a748ed3fff2 ## you can edit, but keep this line
let s:opam_share_dir = system('opam config var share')
let s:opam_share_dir = substitute(s:opam_share_dir, '[\r\n]*$', '', '')

let s:opam_configuration = {}

function! OpamConfOcpIndent()
  execute 'set rtp^=' . s:opam_share_dir . '/ocp-indent/vim'
endfunction
let s:opam_configuration['ocp-indent'] = function('OpamConfOcpIndent')

function! OpamConfOcpIndex()
  execute 'set rtp+=' . s:opam_share_dir . '/ocp-index/vim'
endfunction
let s:opam_configuration['ocp-index'] = function('OpamConfOcpIndex')

function! OpamConfMerlin()
  let l:dir = s:opam_share_dir . '/merlin/vim'
  execute 'set rtp+=' . l:dir
endfunction
let s:opam_configuration['merlin'] = function('OpamConfMerlin')

let s:opam_packages = ['ocp-indent', 'ocp-index', 'merlin']
let s:opam_check_cmdline = ['opam list --installed --short --safe --color=never'] + s:opam_packages
let s:opam_available_tools = split(system(join(s:opam_check_cmdline)))
for tool in s:opam_packages
  " Respect package order (merlin should be after ocp-index)
  if count(s:opam_available_tools, tool) > 0
    call s:opam_configuration[tool]()
  endif
endfor
" ## end of OPAM user-setup addition for vim / base ## keep this line
" ## added by OPAM user-setup for vim / ocp-indent ## 4de6eb8da57bb458c04c4e8860dda2e6 ## you can edit, but keep this line
if count(s:opam_available_tools,'ocp-indent') == 0
  source "/home/hejohns/.opam/4.14.0/share/ocp-indent/vim/indent/ocaml.vim"
endif
" ## end of OPAM user-setup addition for vim / ocp-indent ## keep this line
