(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
;; (package-initialize)
;; we're using use-package instead
(eval-when-compile
 (require 'use-package))
(use-package auto-package-update
 :ensure t
 :config
 (setq auto-package-update-interval 3)
 (auto-package-update-maybe)
 )
(use-package evil
 :ensure t
 :init
 (use-package undo-tree
  :ensure t
  :config
  (global-undo-tree-mode)
  )
 :config
 (evil-mode 1)
 (evil-set-undo-system 'undo-tree)
 (setq evil-want-fine-undo t)
 )
(use-package auto-complete)
(use-package solarized-theme
 :ensure t
 :config
 (load-theme 'solarized-dark t)
 )
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages '(auto-complete solarized-theme evil)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
;; font stuff
(add-to-list 'default-frame-alist '(font . "JetBrains Mono-16"))
(set-face-attribute 'default t :font "JetBrains Mono-16")

(ac-config-default)
;; auto-load agda-mode for .agda and .lagda.md
(setq auto-mode-alist
   (append
    '(("\\.agda\\'" . agda2-mode)
      ("\\.lagda.md\\'" . agda2-mode))
     auto-mode-alist))
(load-file (let ((coding-system-for-read 'utf-8))
                (shell-command-to-string "agda-mode locate")))
;; agda unicode input hack?
(add-hook 'agda2-mode-hook
 (lambda ()
  (list-input-methods)
  (set-input-method "Agda")
  ))
